#!/bin/bash
#
# Automate pv/pvs pre-binding testing.
# The number of PVs and claims do not need to be the same.
# Exit code is the number of errors (0 or more).
# CAUTION: all running PVs and PVCs are deleted by this test!
#
# Assumptions:
# - all pv/pvc files are yaml (filename ends in '.yaml')
# - the pv/pvc *names* are the same as their filename (w/o extension)
#
# Args:
#  -c = create claim(s) before the pv(s), default is to create the pvs first.
#  $1 = list of pv filenames (minus yaml suffix), comma separated.
#  $2 = list of claim filenames (minus yaml suffix), comma separated.
#
# Examples:
#  $0 nfs-pv1,nfs-pv2 nfs-claim2
#   # creates nfs-pv1.yaml then nfs-pv2.yaml then nfs-claim2.yaml
#  $0 -c nfs-pv1,nfs-pv2 nfs-claim1,nfs-claim2,nfs-claim3 #pvc created before pv
#
echo

# change kc to your `kubectl.sh` or `oc` command
kc=${KPATH:-"$GOPATH/src/k8s.io/kubernetes"}/cluster/kubectl.sh

# if you're seeing an error where not all pvs bind in time then increase MAX
MAX=20  # max number of time to check pv status

# note: SLEEP is longer when -c is specified
SLEEP=2 # seconds, per test iteration

C_OPT=0 # false
pv_bound=0; pvc_bound=0
warn=0; err=0

# -c option, must appear before list of pvs
if [[ "$1" == '-c' ]] ; then
  C_OPT=1
  SLEEP=10
  shift
fi

# convert list of pv and pvcs to arrays
pvs=(${1//,/ });  numPVs=${#pvs[@]}
pvcs=(${2//,/ }); numPVCs=${#pvcs[@]}

set expected num of bound pvs to the min of # pvs or pvcs
expct_bound=$numPVs
(( numPVCs < numPVs )) && expct_bound=$numPVCs

# cleanup from prior run
echo "cleanup..."
$kc delete pv --all
$kc delete pvc --all

echo
if (( C_OPT )) ; then
  echo "Creating PVCs \"${pvcs[@]}\" followed by PVs \"${pvs[@]}\"..."
  objs="${pvcs[@]} ${pvs[@]}"
else
  echo "Creating PVs \"${pvs[@]}\" followed by PVCs \"${pvcs[@]}\"..."
  objs="${pvs[@]} ${pvcs[@]}"
fi

# check if prebinding is defined in pvs and/or pvcs
declare -A pv_pre=(); declare -A pvc_pre=() # assoc arrays
numPrePVs=0; numPrePVCs=0

for pv in ${pvs[@]}; do
  # check for claimRef in pv
  pre="$(sed -n '/claimRef:/,/name:/{/name:/p}' $pv.yaml)"
  if [[ -n "$pre" ]] ; then # claimRef defined, extract name:
    pre="${pre#*: }" # just the target name
    pv_pre[$pv]="$pre" # add to pv assoc array
    ((numPrePVs++))
  fi
done
for pvc in ${pvcs[@]}; do
  # check for volumeName in pvc
  pre="$(grep 'volumeName:' $pvc.yaml)"
  if [[ -n "$pre" ]] ; then # volumeName defined, extract name
    pre="${pre#*: }" # just the target name
    pvc_pre[$pvc]="$pre" # add to pvc assoc array
    ((numPrePVCs++))
  fi
done

# create pvs and pvcs
for obj in $objs; do
  $kc create -f $obj.yaml
  (( $? != 0)) && exit 1
done

echo
echo "Test loop for correctly bound PVs..."
echo "  (max wait time is $((MAX*SLEEP)) seconds)"
(( C_OPT )) &&
  echo "  Note: PV binding takes much longer when creating the PVCs first"
echo

# note: for pre-bound pvs the "Released" state is the same as "Available"
for (( i=1; i<=$MAX; i++ )); do
  sleep $SLEEP
  cnt=$($kc get pv | grep -c ' Bound ')
  (( cnt == expct_bound )) && break  # done, all expected pvs are bound
  echo "   $i)  $cnt out of $expct_bound PVs are Bound ..."
done
echo


## the expected num of pvs are now bound or we exceeded max tries, so analyze the results:
for pv in ${pvs[@]}; do
  p="$($kc get pv $pv --no-headers | grep ' Bound ')"
  # is pv bound?
  if [[ -z "$p" ]] ; then  # not bound
    # it may be ok that this pv isn't bound but this is difficult to know
    # we can check for pre-binding and see if the target claim exists
    [[ -z "${pv_pre[$pv]}" ]] && continue # no claimRef so assume ok for pv to not be bound
    # get the target pvc for pre-bound pv
    pvc="$($kc get pvc ${pv_pre[$pv]} --no-headers 2>/dev/null)"
    (( $? != 0 )) && continue # no target pvc so assume ok that pv is not bound
    # there's a pvc matching claimRef but it may have been bound to a different pv
    if ! grep -q ' Bound ' <<<"$pvc" ; then
      # pvc that matches claimRef is not bound, so report error and continue
      echo "ERROR: PV $pv is not bound and its claimRef (${pv_pre[$pv]}) exists but is also not bound"
      ((err++))
      continue
    fi
    # pv's claimRef's pvc is bound
    # claimRef pvc could be bound to this pv or to a different pv
    p="$(awk '{print $3}' <<<"$pvc")" # extract the pvc's pv
    echo -n "ERROR: PV $pv is not bound but its claimRef (${pv_pre[$pv]}) is bound to "
    [[ "$p" == "$pv" ]] && echo "it" || echo "PV $p"
    ((err++))
    continue
  fi

  # pv is bound!
  # did pv bind to the correct pvc?
  c=$(awk '{print $5}' <<<"$p") # extract the live claim
  c=${c#*/} # remove namespace from live claim name
  # get the claim for the pv
  pvc="$($kc get pvc $c --no-headers 2>/dev/null)"
  if (( $? != 0 )) ; then
    echo "ERROR: bound PV $pv's claim ($c) does not exist"
    ((err++))
    continue
  fi
  if ! grep -q ' Bound ' <<<"$pvc" ; then
    echo "ERROR: bound PV $pv's claim ($c) is not bound"
    ((err++))
    continue
  fi
  if ! grep -q " $pv " <<<"$pvc" ; then
    p="$(awk '{print $3}' <<<"$pvc")" # extract the pvc's pv
    echo "ERROR: bound PV $pv's claim ($c) exists but this claim is bound to PV $p"
    ((err++))
    continue
  fi
  # check for pre-bound pv being bound to its target claim
  if [[ -n "${pv_pre[$pv]}" && "$c" != ${pv_pre[$pv]} ]] ; then
    echo "ERROR: bound PV $pv's claimRef (${pv_pre[$pv]}) does not match its live PVC $c"
    ((err++))
    continue
  fi

  ((pv_bound++))
done

# make sure the pvcs bound to right pvs
for pvc in ${pvcs[@]}; do
  p="$($kc get pvc $pvc --no-headers | grep ' Bound ')"
  # is pvc bound?
  if [[ -z "$p" ]] ; then  # not bound
    # it may be ok that this pvc isn't bound but this is difficult to know
    # we can check for pre-binding and see if the target pv exists
    [[ -z "${pvc_pre[$pvc]}" ]] && continue # no volumeName so assume ok for pvc to not be bound
    # get the target pv for pre-bound pvc
    pv="$($kc get pv ${pvc_pre[$pvc]} --no-headers 2>/dev/null)"
    (( $? != 0 )) && continue # no target pv so assume ok that pvc is not bound
    # there's a pv matching volumeName but it may have been bound to a different pvc
    if ! grep -q ' Bound ' <<<"$pv" ; then
      # pv that matches volumeName is not bound, so report error and continue
      echo "ERROR: PVC $pvc is not bound and its volumeName (${pvc_pre[$pvc]}) exists but is also not bound"
      ((err++))
      continue
    fi
    # pvc's target volumeName is bound but is it bound to this pvc?
    c="$(awk '{print $5}' <<<"$pv")" # extract the pv's pvc
    c=${c#*/} # remove namespace from claim name
    if [[ "$c" != "$pvc" ]] ; then
      echo "ERROR: PVC $pvc is not bound but its volumeName (${pvc_pre[$pvc]}) is bound to PVC $c"
      ((err++))
    fi
    continue
  fi

  # pvc is bound!
  # did pvc bind to the correct pv?
  pv=$(awk '{print $3}' <<<"$p") # extract the live pv
  # get the pv
  p="$($kc get pv $pv --no-headers 2>/dev/null)"
  if (( $? != 0 )) ; then
    echo "ERROR: bound PVC $pvc's PV ($pv) does not exist"
    ((err++))
    continue
  fi
  if ! grep -q ' Bound ' <<<"$p" ; then
    echo "ERROR: bound PVC $pvc's PV ($pv) is not bound"
    ((err++))
    continue
  fi
  if ! grep -q "/$pvc " <<<"$p" ; then
    c="$(awk '{print $5}' <<<"$p")" # extract the pv's pvc
    c=${c#*/} # remove namespace from claim name
    echo "ERROR: bound PVC $pvc's PV ($pv) exists but this PV is bound to PVC $c"
    ((err++))
    continue
  fi
  # check for pre-bound pvc being bound to its target pv
  if [[ -n "${pvc_pre[$pvc]}" && "$pv" != ${pvc_pre[$pvc]} ]] ; then
    echo "ERROR: bound PVC $pvc's volumeName (${pvc_pre[$pvc]}) does not match its live PV $pv"
    ((err++))
    continue
  fi

  ((pvc_bound++))
done

if (( i > MAX )) ; then
  echo -e "\nERROR: failed to bind all PVs after $MAX tries."
  ((err++))
fi

echo
$kc get pv
echo
$kc get pvc

echo -e "\n\n==== Results ====="
echo $err errors.
echo $warn warnings.

echo
if (( pv_bound == expct_bound )) ; then
  echo "All PVs bound to the expected PVCs."
else
  echo "1 or more PVs did not bind correctly."
fi

echo
if (( pvc_bound == expct_bound )) ; then
  echo "All PVCs bound to the expected PVs."
else
  echo "1 or more PVCs did not bind correctly."
fi

echo
exit $err
