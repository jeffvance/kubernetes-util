#!/bin/bash
#
# Invoke pv-test for the various combinations of PV/PVC tests. These tests happen to be for
# NFS but they are testing the creation and binding of PVs -> PVCs and PVCs -> PVs.
# CAUTION: all running PVs and PVCs are deleted by this test!
#
# Assumptions:
# - all pv/pvc files are yaml (filename ends in '.yaml')
# - all the test files are local to where this test is run from
#
# Current tests:
#   nfs-pv1 (no pre-binding)
#   nfs-pv2 (no pre-binding)
#   nfs-pv3 (pre-binds to nfs-claim3)
#   nfs-claim1 (no pre-binding)
#   nfs-claim2 (pre-binds to nfs-pv2)
#   nfs-claim3 (no pre-binding)

# change t to point to the pv-test script
t='/root/kubernetes-util/persistent_storage/pv-pvc-tests/pv-test' # core test filename
# change f to point to the desired log file
f='/tmp/pv-test.log' # log file

err=0; cnt=1

echo -e "\n*** PV/PVC with Pre-binding Test Suite ***" | tee $f
echo "(See logfile \"$f\" for all output)"
echo -e "\npv-test located: $t" | tee -a $f
echo
sleep 3


echo -e "\nA. Simple: 1 pv -> 1 pvc..." | tee -a $f
echo "   Unit: $cnt: Expect PV1 to be bound to claim1" | tee -a $f
$t nfs-pv1 nfs-claim1 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "   Unit: $cnt: Expect PV2 to be bound to claim2" | tee -a $f
$t nfs-pv2 nfs-claim2 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "   Unit: $cnt: Expect PV3 to be bound to claim3" | tee -a $f
$t nfs-pv3 nfs-claim3 >>$f
(( $? != 0 )) && ((err++))
((cnt++))

echo -e "\nB. Simple: 1 pvc -> 1 pv..." | tee -a $f
echo "Note: starting with the pvc requires *considerably* more time to bind"
echo "   Unit: $cnt: Expect PV1 to be bound to claim1" | tee -a $f
$t -c nfs-pv1 nfs-claim1 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "   Unit: $cnt: Expect PV2 to be bound to claim2" | tee -a $f
$t -c nfs-pv2 nfs-claim2 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "   Unit: $cnt: Expect PV3 to be bound to claim3" | tee -a $f
$t -c nfs-pv3 nfs-claim3 >>$f
(( $? != 0 )) && ((err++))
((cnt++))


echo -e "\nC. Multiple pvs -> 1 pvc..." | tee -a $f
echo "  Unit $cnt: Expect either PV1 or PV2 to be bound to claim1" | tee -a $f
$t nfs-pv1,nfs-pv2 nfs-claim1 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV2 to be bound to claim2" | tee -a $f
$t nfs-pv1,nfs-pv2 nfs-claim2 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV3 to be bound to claim3" | tee -a $f
$t nfs-pv1,nfs-pv2,nfs-pv3 nfs-claim3 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV1 or PV2 to be bound to claim1, ignore PV3 errors" | tee -a $f
$t nfs-pv1,nfs-pv2,nfs-pv3 nfs-claim1 >>$f
(( $? != 0 )) && ((err++))
((cnt++))


echo -e "\nD. Multiple pvcs -> 1 pv..." | tee -a $f
echo "Note: starting with the pvc requires *considerably* more time to bind"
echo "  Unit $cnt: Expect PV1 to be bound to either claim" | tee -a $f
$t -c nfs-pv1 nfs-claim1,nfs-claim2 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV2 to be bound to claim2, ignore other claim errors" | tee -a $f
$t -c nfs-pv2 nfs-claim1,nfs-claim2 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV3 to be bound to claim3, ignore other claim errors" | tee -a $f
$t -c nfs-pv3 nfs-claim1,nfs-claim2,nfs-claim3 >>$f
(( $? != 0 )) && ((err++))
((cnt++))


echo -e "\nE. Multiple pvs and multiple pvcs..." | tee -a $f
echo "  Unit $cnt: Expect PV3 -> claim3, PV2 may not bind to claim2 if it finds claim1 first" | tee -a $f
$t nfs-pv1,nfs-pv2,nfs-pv3 nfs-claim1,nfs-claim2,nfs-claim3 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV2 -> claim2, PV1 may bind to claim3 if it finds it before claim1" | tee -a $f
$t -c nfs-pv1,nfs-pv2,nfs-pv3 nfs-claim1,nfs-claim2,nfs-claim3 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV3 -> claim3 and PV2 -> claim2" | tee -a $f
$t nfs-pv1,nfs-pv2,nfs-pv3 nfs-claim3,nfs-claim2,nfs-claim1 >>$f
(( $? != 0 )) && ((err++))
((cnt++))
echo "  Unit $cnt: Expect PV3 -> claim3 and PV2 -> claim2" | tee -a $f
$t -c nfs-pv3,nfs-pv2,nfs-pv1 nfs-claim1,nfs-claim2,nfs-claim3 >>$f
(( $? != 0 )) && ((err++))


if (( err > 0 )) ; then
  grep ERROR $f | less
fi

echo -e "\n$cnt tests run with $err errors" | tee -a $f
echo "See logfile \"$f\" for all output"
echo -e "\nEnd of PV/PVC Test Suite" | tee -a $f
echo

(( err > 0 )) && exit 1
exit 0
